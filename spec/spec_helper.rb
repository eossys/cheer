# This file was generated by the `rspec --init` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# Require this file using `require "spec_helper"` to ensure that it is only
# loaded once.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
$:.unshift File.dirname(__FILE__) + '/../lib'

require 'active_record'
require 'sqlite3'
require 'standings'

ActiveRecord::Base.establish_connection(
  adapter: "sqlite3",
  database: ":memory:"
)

RSpec.configure do |config|
  config.treat_symbols_as_metadata_keys_with_true_values = true
  config.order = 'random'
  config.filter_run :focus
  config.run_all_when_everything_filtered = true
end

ActiveRecord::Migration.verbose = false

ActiveRecord::Schema.define do
  create_table :game_users do |t|
    t.string :name
    t.float :score, default: 0.0
    t.integer :age, default: 20
    t.timestamps
  end

  create_table :products do |t|
    t.string :name
    t.float :price, default: 0.0
    t.integer :review, default: 1
    t.timestamps
  end

  create_table :students do |t|
    t.string :name
    t.float :score, default: 0.0
    t.integer :age, default: 5
    t.timestamps
  end

  create_table :developers do |t|
    t.string :name
    t.float :total_experience, default: 0.0
    t.integer :ruby_gems_created, default: 0
    t.timestamps
  end
end

class GameUser < ActiveRecord::Base
  extend Standings::ModelAdditions

  # leaderboard leaderboard_name, {:column_name, :sort_order, :around_limit}
  # Default Sort Order will be ID for game_users with equal score.
  leaderboard :high_scorers, column_name: :score,
                             sort_order: ["name", "age DESC"],
                             around_limit: 2
end

class Product < ActiveRecord::Base
  extend Standings::ModelAdditions

  # leaderboard leaderboard_name, {:column_name, :sort_order, :around_limit}
  # Default Sort Order will be ID for products with equal price.
  leaderboard :costliest, column_name: :price,
                          sort_order: %w(name),
                          around_limit: 3
end

class Student < ActiveRecord::Base
  extend Standings::ModelAdditions

  # leaderboard leaderboard_name, {:column_name, :sort_order, :around_limit}
  # Default Sort Order will be ID for students with equal score.
  leaderboard :topers, column_name: :score
end

class Developer < ActiveRecord::Base
  extend Standings::ModelAdditions

  # leaderboard leaderboard_name, {:column_name, :sort_order, :around_limit}
  leaderboard :ruby_heroes, column_name: :ruby_gems_created,
                            sort_order: %w(name),
                            around_limit: 3

  leaderboard :veterans, column_name: 'total_experience',
                         sort_order: %w(name),
                         around_limit: 1
end
